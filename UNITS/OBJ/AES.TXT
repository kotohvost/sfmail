
!!!!NOTE!!! Не вкоем случае нельзя вызывать из  процедур-клиентов
функции использующие сервис ДОСА.  Например запись  в  файл.  Это
преведет  к  краху  системы,  так  как  дос  нереентерабелен.  На
процедуры-клиенты  накладываются  все  ограничения   свойственные
процедурам обслуживающим прерывания.
!!!NOTE!!!! Процедуры клиенты должны быть объявлены как дальние.


                   ASYNCHRONOUS EVENT SHEDULER

     Планировщик  асинхронных  событий  служит   для   унификации
интерфейса создания семафоров времени и процедур исполняемых  при
наступлении некоторых событий.

     Инициализация  планировщика  происходит  при   инициализации
коммуникационного    сервера.    При    успешной    инициализации
устанавливается в  TRUE  младший  (нулевой)  бит  битовой  записи
rLibFlags структуры sLibInfo.  Этот бит устанавливается  функцией
инициализации коммуникационного сервера InitFLib.

     В  качестве  первичного  генератора   событий,   планировщик
использует либо  внутренний  сервис  коммуникационного  драйвера,
либо прерывание системного таймера (INT8 - IRQ0), либо прерывание
часов реального времени (INT 70h - IRQ8).
     Какой из генератор первичных событий  будет  использоваться,
задается  битами  2  и  3  битовой  записи  rLibFlags   структуры
sLibInfo.   Эти  биты  должны  быть  установлены  соответствующим
образом перед вызовом функции InitFLib.

     AES является неотъемлемой частью  коммуникационного  сервера
(также как в протоколе IPX его AES).


     ┌───────────────────────────────────────────────────────────┐
     │                ОПИСАНИЕ ФУНКЦИЙ AES                       │
    ┌┘                                                           │
    └────────────────────────────────────────────────────────────┘

function CreateAlarmSem(var Hndl;var TimeSem;Period:longint):boolean;external;
function CreateESR(var Hndl; Routine:pointer; var TruSem):boolean;external;
function CreateRepESR(var Hndl; Routine:pointer ;Period:longint):boolean;external;
function DeleteAESClient(var Hndl):boolean;external;
procedure Suspend;external;
function Resume:integer;external;

     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     Внимание!  Так  как  процедуры  вызываются  из   обработчика
прерываний,  то они  могут  оперировать  только  со  статическими
данными! Вернее  внутри  процедуры  вы  можете  оперировать  и  с
локальными переменными,  но их  значения  будут  верны  только  в
течении вызова процедуру.  Поэтому семафоры на которые передается
указатели   в   функции   AES   должны   быть    объявлены    как
статические(глобальные).
     Перед вызовом процедур, ядро AES устанавливает регистр DS на
сегмент  статических  данных  -  в  соответствии  с  соглашениями
ТурбоПаскаля.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!NOTE!!! Любой семафор,  процедуру или повторяящуяся  процедуру
,устанавливаемые/вызываемые  с  помощью   AES,   будем   называть
"клиентом AES"

!!!!!!NOTE!!!!! Каждого вида клиентов может быть до 16ти штук.


─────────═══════════════════════════════════════─────────────────
                     ФУНКЦИЯ CreateAlarmSem

     Функция служит для  создания  "клиента"  AES  типа  семафора
инкрементируемого по времени.

     CreateAlarmSem (var Hndl; var TimeSem; Period:longint):boolean

     Функция возвращает булевский тип, неуспех выполнения функции
(False) может быть результатом  исчерпания  ячеек  во  внутренней
таблице AES.
     Функция  инициализирует  переменную   Hndl   адрес   которой
передается в качестве первого аргумента функции.  Эта  переменная
понадобится вам при уничтожении данного клиента.
     В качестве второго  аргумента  передается  адрес  переменной
которая будет служить семафором-счетчиком.
     В качестве третьего аргумента передается время в тиках через
которое будет производится инкремент семафора.
     Переменные Hndl и Period должны иметь размерность longint.
     Переменная TimeSem должна иметь размерность integer (word)

─────────═══════════════════════════════════════─────────────────
                        ФУНКЦИЯ CreateESR

     Функция служит для создания  "клиента"  AES  типа  процедуры
вызываемой в  случае  если  связанный  с  ней  семафор  принимает
значение TRUE.

     CreateESR(var Hndl; Routine:pointer; var TruSem):boolean

     Функция возвращает булевский тип, неуспех выполнения функции
(False) может быть результатом  исчерпания  ячеек  во  внутренней
таблице AES.
     Функция  инициализирует  переменную   Hndl   адрес   которой
передается в качестве первого аргумента функции.  Эта  переменная
понадобится вам при уничтожении данного клиента.
     В качестве  второго  аргумента  передается  адрес  процедуры
которая будет вызываться в  случае  принятия  семафором  значения
TRUE.

!!!NOTE!!! После принятия семафором значения TRUE процедура будет
вызываться КАЖДЫЙ тик. Если Вам это не нужно, то ниже описано как
этого избежать.

     В качестве  третьего  аргумента  передается  адрес  семафора
значение которого будет проверятся (когда он примет значение TRUE
будет вызвана процедура адрес которой задан во  втором  аргументе
функции).

     Переменная Hndl должна иметь размерность longint.
     Переменная(а не указатель) TruSem должна иметь
     размерность integer (word)

!!!!! Чтобы избежать постоянного запуска процедуры после принятия
семафором значения TRUE,  вы можете внутри  процедуры  установить
его в False то-есть в ноль.


────────═══════════════════════════════════════─────────────────
                     ФУНКЦИЯ CreateRepESR

     Функция служит для создания "клиента" AES типа  периодически
вызываемой процедуры.

     CreateRepESR (var Hndl; Routine:pointer; Period:longint):boolean

     Функция возвращает булевский тип, неуспех выполнения функции
(False) может быть результатом  исчерпания  ячеек  во  внутренней
таблице AES.
     Функция  инициализирует  переменную   Hndl   адрес   которой
передается в качестве первого аргумента функции.  Эта  переменная
понадобится вам при уничтожении данного клиента.
     В качестве  второго  аргумента  передается  адрес  процедуры
которая будет вызываться с периодом заданным третьим аргументом.
     В качестве третьего аргумента передается время в тиках через
которое будет вызываться процедура.
     Переменные Hndl и Period должны иметь размерность longint.

    ══════════════════════════════════════════════════════════════


     !!!!!!!Так как клиенты  являются  ограниченным  ресурсом  то
рекомендуется уничтожать их после истечения необходимости в них.

──────────────────────────────────────────────────────────────────
                     ФУНКЦИЯ DeleteAESClient

     Функция служит для сообщения  ядру  AES  что  данный  клиент
более не нужен и может поступить в повторное использование.

     DeleteAESClient(var Hndl):boolean

     Функция имеет единственный аргумент  -  хэндл,  который  был
возвращен какой либо из функций создания клиентов.
     Функция возвращает значение False  ,  в  случае  если  хэндл
переданный ей не значится во внутренних таблицах AES.

────────────────────────────────────────────────────────────────
                         ФУНКЦИЯ Suspend

     Функция должна вызываться когда нужно временно приостановить
работу AES без  уничтожения  клиентов.  Например  это  необходимо
перед свопингом.
     Возвращаемых значений нет (процедура).

     !!!!!!!!Окончательная  деинициализация  AES  происходит   во
время  деинициализации  коммуникационного   сервера   -   функция
EndWork.

────────────────────────────────────────────────────────────────
                         ФУНКЦИЯ Resume

     Функция  восстанавливает  работу  AES  остановленую  вызовом
функции Suspend. Например после свопинга.

     Функция  возвращает   положительное   число   при   успешном
выполнении или отрицательное число при ошибке.
     Ошибок может быть две:
     TERR_NOLIB - неинициализирован коммуникационный сервер
     AERR_NOAES - не прошла реинициализация AES  -  он  будет  не
доступен и все клиенты (если они существовали) будут потеряны.

     Их значения даны в файле описания коммуникационного сервера.


--------------------------------------------------------
     Что касается стека. Если при инициализации коммуникационного
сервера был создан специальный стек для AES,  то AES  при  вызове
своих клиентов будет переключать стек на этот специальный стек. В
противном случае  будет  использоватся  тот  стек  на  который  в
текущий момент указывают регистры SS:SP.


